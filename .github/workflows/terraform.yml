name: "Terraform"

on:
  push:
    branches:
      - develop
      - 'release/**'
      - main
  pull_request:
    branches:
      - develop
      - 'release/**'
      - main

jobs:
  format-validate:
    name: "Terraform Plan"
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.2"
    - name: Configure AWS Credentials
      id: aws-creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::676791758112:role/RoleForGithubActions
        role-session-name: github-deploy
        aws-region: ap-southeast-3

    - name: Create AWS named profile
      run: |
        mkdir -p $HOME/.aws

        cat <<EOF > $HOME/.aws/config
          [profile terraform]
          region=ap-southeast-3
        EOF

        cat <<EOF > $HOME/.aws/credentials
          [terraform]
          aws_access_key_id=$AWS_ACCESS_KEY_ID
          aws_secret_access_key=$AWS_SECRET_ACCESS_KEY
          aws_session_token=$AWS_SESSION_TOKEN
        EOF

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        aws s3 ls s3://sumar-terraform-state
        terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

  # terraform-plan:
  #   name: "Terraform Plan"
  #   permissions:
  #     id-token: write
  #     contents: read
  #   runs-on: ubuntu-latest
  #   # container: docker.io/hashicorp/terraform:1.6
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::676791758112:role/RoleForGithubActions
  #         role-session-name: github-deploy
  #         aws-region: ap-southeast-1
  #     - uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_wrapper: false
  #     - name: Prepare TFVARS
  #       run: |
  #         cat <<EOF >> terraform-development.tfvars
  #         auth0_domain        = "${{ vars.AUTH0_DOMAIN }}"
  #         auth0_client_id     = "${{ vars.AUTH0_CLIENT_ID }}"
  #         auth0_client_secret = "${{ secrets.AUTH0_CLIENT_SECRET }}"
  #         EOF

  #     - name: Terraform version
  #       run: terraform -version

  #     - name: Terraform Init
  #       run: terraform init

  #     - name: Select development workspace
  #       run: terraform workspace new development || terraform workspace select development

  #     - name: Terraform Validate
  #       run: terraform validate

  #     - name: Terraform Plan
  #       run: terraform plan -no-color -var-file=terraform-$(terraform workspace show).tfvars

  # deploy-development:
  #   if: github.ref == 'refs/heads/"develop"'
  #   name: "Deploy developmnet environment"
  #   permissions:
  #     id-token: write
  #     contents: read
  #   runs-on: ubuntu-latest
  #   needs: terraform-plan
  #   container: docker.io/hashicorp/terraform:1.6
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::676791758112:role/RoleForGithubActions
  #         role-session-name: github-deploy
  #         aws-region: ap-southeast-1

  #     - name: Prepar TFVARS
  #       run: |
  #         cat <<EOF >> terraform-development.tfvars
  #         auth0_domain        = "${{ vars.AUTH0_DOMAIN }}"
  #         auth0_client_id     = "${{ vars.AUTH0_CLIENT_ID }}"
  #         auth0_client_secret = "${{ secrets.AUTH0_CLIENT_SECRET }}"
  #         EOF

  #     - name: Terraform Init
  #       run: terraform init

  #     - name: Select development workspace
  #       run: terraform workspace new development || terraform workspace select development

  #     - name: Terraform Apply
  #       run: echo "terraform apply -auto-approve -var-file=terraform-$(terraform workspace show).tfvars"
